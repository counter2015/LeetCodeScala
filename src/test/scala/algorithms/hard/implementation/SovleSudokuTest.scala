package algorithms.hard.implementation

import algorithms.hard.implementation.SolveSudoku.{solveSudoku => solve}
import org.scalatest.{FunSuite, Matchers}

class SovleSudokuTest extends FunSuite with Matchers {

  test("test0: sample input") {
    val arr = Array(
      Array('5', '3', '.', '.', '7', '.', '.', '.', '.'),
      Array('6', '.', '.', '1', '9', '5', '.', '.', '.'),
      Array('.', '9', '8', '.', '.', '.', '.', '6', '.'),
      Array('8', '.', '.', '.', '6', '.', '.', '.', '3'),
      Array('4', '.', '.', '8', '.', '3', '.', '.', '1'),
      Array('7', '.', '.', '.', '2', '.', '.', '.', '6'),
      Array('.', '6', '.', '.', '.', '.', '2', '8', '.'),
      Array('.', '.', '.', '4', '1', '9', '.', '.', '5'),
      Array('.', '.', '.', '.', '8', '.', '.', '7', '9'))

    val res = Array(
      Array('5', '3', '4', '6', '7', '8', '9', '1', '2'),
      Array('6', '7', '2', '1', '9', '5', '3', '4', '8'),
      Array('1', '9', '8', '3', '4', '2', '5', '6', '7'),
      Array('8', '5', '9', '7', '6', '1', '4', '2', '3'),
      Array('4', '2', '6', '8', '5', '3', '7', '9', '1'),
      Array('7', '1', '3', '9', '2', '4', '8', '5', '6'),
      Array('9', '6', '1', '5', '3', '7', '2', '8', '4'),
      Array('2', '8', '7', '4', '1', '9', '6', '3', '5'),
      Array('3', '4', '5', '2', '8', '6', '1', '7', '9'))

    solve(arr)
    arr.flatten.mkString shouldBe res.flatten.mkString
  }

  test("test1: hard to say") {
    val arr = Array(
      Array('.', '.', '9', '7', '4', '8', '.', '.', '.'),
      Array('7', '.', '.', '.', '.', '.', '.', '.', '.'),
      Array('.', '2', '.', '1', '.', '9', '.', '.', '.'),
      Array('.', '.', '7', '.', '.', '.', '2', '4', '.'),
      Array('.', '6', '4', '.', '1', '.', '5', '9', '.'),
      Array('.', '9', '8', '.', '.', '.', '3', '.', '.'),
      Array('.', '.', '.', '8', '.', '3', '.', '2', '.'),
      Array('.', '.', '.', '.', '.', '.', '.', '.', '6'),
      Array('.', '.', '.', '2', '7', '5', '9', '.', '.'))
    /*
    ..9748...
    7..6.2...
    .2.1.9...
    ..7986241
    264317598
    198524367
    ...863.2.
    ...491..6
    ...2759..
      */

    val res = Array(
      Array('5', '1', '9', '7', '4', '8', '6', '3', '2'),
      Array('7', '8', '3', '6', '5', '2', '4', '1', '9'),
      Array('4', '2', '6', '1', '3', '9', '8', '7', '5'),
      Array('3', '5', '7', '9', '8', '6', '2', '4', '1'),
      Array('2', '6', '4', '3', '1', '7', '5', '9', '8'),
      Array('1', '9', '8', '5', '2', '4', '3', '6', '7'),
      Array('9', '7', '5', '8', '6', '3', '1', '2', '4'),
      Array('8', '3', '2', '4', '9', '1', '7', '5', '6'),
      Array('6', '4', '1', '2', '7', '5', '9', '8', '3'))

    solve(arr)
    arr.flatten.mkString shouldBe res.flatten.mkString
  }

}
